using Devon4Net.Application.WebAPI.Domain.Database;
using Devon4Net.Application.WebAPI.Domain.Entities;
using Devon4Net.Application.WebAPI.Domain.RepositoryInterfaces;
using Devon4Net.Domain.UnitOfWork.Repository;
using Devon4Net.Infrastructure.Common;
using System.Linq.Expressions;

namespace Devon4Net.Application.WebAPI.Data.Repositories
{
    public class {{entity}}Repository : Repository<{{entity}}>, I{{entity}}Repository
    {
        public {{entity}}Repository({{context}} context) : base(context)
        {
        }

        public Task<{{entity}}> Create({{#each vars}}{{this.type}} {{this.name}}{{#unless @last}}{{this.sep}}{{/unless}}{{/each}})
        {
            Devon4NetLogger.Debug($"Create method from repository {{entity}}Repository");
            return Create(new {{entity}} { {{#each vars}}{{this.name}} = {{this.name}}{{#unless @last}}{{this.sep}}{{/unless}}{{/each}} });
        }

        public async Task<{{vars.0.type}}> Delete{{entity}}ById({{vars.0.type}} id)
        {
            Devon4NetLogger.Debug($"Delete{{entity}}ById method from repository {{entity}}Repository with value : {id}");
            var deleted = await Delete(t => t.Id == id).ConfigureAwait(false);

            if (deleted)
            {
                return id;
            }

            throw new ApplicationException($"The Todo entity {id} has not been deleted.");
        }

        public Task<IList<{{entity}}>> Get{{entity}}(Expression<Func<{{entity}}, bool>> predicate = null)
        {
            Devon4NetLogger.Debug("Get{{entity}} method from {{entity}}Repository");
            return Get(predicate);
        }

        public Task<{{entity}}> Get{{entity}}ById({{vars.0.type}} id)
        {
            Devon4NetLogger.Debug($"GetTodoById method from repository {{entity}}Repository with value : {id}");
            return GetFirstOrDefault(t => t.Id == id);
        }
    }
}
