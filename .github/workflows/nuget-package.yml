name: Build and Publish NuGet Package

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Select the project to build'
        required: true
        default: 'Path/To/Project1.csproj'
        options:
          - 'Path/To/Project1.csproj'
          - 'Path/To/Project2.csproj'
          - 'Path/To/Project3.csproj'
      version_type:
        description: 'Select the version type'
        required: true
        default: 'patch'
        options:
          - 'major'
          - 'minor'
          - 'patch'
          - 'preview'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '7.x'

      - name: Get latest version from GitHub Packages
        run: |
          LATEST_VERSION=$(dotnet nuget list source --source "https://nuget.pkg.github.com/<YOUR_GITHUB_USERNAME>/index.json" | grep "<PackageName>" | head -n 1 | awk '{print $2}')
          echo "Latest version: $LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Determine new version
        id: version
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          LATEST_VERSION="${{ env.LATEST_VERSION }}"

          # Extract major, minor, patch from latest version (assumes format major.minor.patch or major.minor.patch-preview)
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3 | cut -d- -f1) # Removes preview suffix if present

          # Increment version based on user input
          if [ "$VERSION_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$VERSION_TYPE" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          elif [ "$VERSION_TYPE" == "patch" ]; then
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          elif [ "$VERSION_TYPE" == "preview" ]; then
            PREVIEW_SUFFIX="-preview"
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))$PREVIEW_SUFFIX"
          fi

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore ${{ github.event.inputs.project }}

      - name: Build project
        run: dotnet build ${{ github.event.inputs.project }} --configuration Release --no-restore

      - name: Pack NuGet package
        run: dotnet pack ${{ github.event.inputs.project }} --configuration Release --no-build --output ./nuget-packages /p:PackageVersion=${{ env.NEW_VERSION }}